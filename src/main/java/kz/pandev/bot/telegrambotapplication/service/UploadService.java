package kz.pandev.bot.telegrambotapplication.service;

import kz.pandev.bot.telegrambotapplication.model.Category;
import kz.pandev.bot.telegrambotapplication.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class UploadService {

    private final CategoryRepository categoryRepository;

    public void processExcelFile(String fileId, String chatId, TelegramLongPollingBot bot) {
        try {
            File file = bot.execute(new GetFile(fileId));
            String filePath = file.getFilePath();
            String fullUrl = "https://api.telegram.org/file/bot" + bot.getBotToken() + "/" + filePath;

            log.info("–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å URL: {}", fullUrl);

            // –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            Message progressMessage = bot.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%")
                    .build());

            int messageId = progressMessage.getMessageId();

            try (InputStream inputStream = new URL(fullUrl).openStream();
                 XSSFWorkbook workbook = new XSSFWorkbook(inputStream)) {

                var sheet = workbook.getSheetAt(0);
                int rowCount = sheet.getPhysicalNumberOfRows();
                int processedRows = 0;
                int lastProgress = -1;

                List<String> duplicates = new ArrayList<>();

                for (Row row : sheet) {
                    if (row.getRowNum() == 0) continue;

                    String parentName = row.getCell(0).getStringCellValue().trim();
                    String childName = row.getCell(1).getStringCellValue().trim();

                    Category parent = categoryRepository.findByName(parentName)
                            .orElseGet(() -> {
                                Category newParent = new Category(parentName, null);
                                categoryRepository.save(newParent);
                                log.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}", parentName);
                                return newParent;
                            });

                    if (!childName.isEmpty()) {
                        Optional<Category> existingChild = categoryRepository.findByName(childName);
                        if (existingChild.isEmpty()) {
                            categoryRepository.save(new Category(childName, parent));
                            log.info("–°–æ–∑–¥–∞–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {} -> {}", parentName, childName);
                        } else {
                            log.info("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}", childName);
                            duplicates.add(childName);
                        }
                    }

                    processedRows++;
                    int progress = (int) ((double) processedRows / rowCount * 100);

                    if (progress != lastProgress) {
                        lastProgress = progress;
                        bot.execute(EditMessageText.builder()
                                .chatId(chatId)
                                .messageId(messageId)
                                .text("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: " + progress + "%")
                                .build());
                    }
                }

                // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                bot.execute(EditMessageText.builder()
                        .chatId(chatId)
                        .messageId(messageId)
                        .text("‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                        .build());

                log.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: chatId={}", chatId);

                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if (!duplicates.isEmpty()) {
                    StringBuilder duplicateMsg = new StringBuilder("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ):\n");
                    for (String dup : duplicates) {
                        duplicateMsg.append("‚Ä¢ ").append(dup).append("\n");
                    }

                    bot.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(duplicateMsg.toString())
                            .build());
                }

            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞", e);
            try {
                bot.execute(SendMessage.builder()
                        .chatId(chatId)
                        .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞.")
                        .build());
            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ", ex);
            }
        }
    }



    public void sendExcelTemplate(String chatId, TelegramLongPollingBot bot) {
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            var sheet = workbook.createSheet("Categories");
            var header = sheet.createRow(0);
            header.createCell(0).setCellValue("Parent Category");
            header.createCell(1).setCellValue("Child Category");

            var example = sheet.createRow(1);
            example.createCell(0).setCellValue("Food");
            example.createCell(1).setCellValue("Fruits");

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());

            bot.execute(SendDocument.builder()
                    .chatId(chatId)
                    .document(new InputFile(inputStream, "category_template.xlsx"))
                    .caption("üìé –í–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                    .build());

            log.info("–®–∞–±–ª–æ–Ω Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chatId={}", chatId);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∞–±–ª–æ–Ω–∞ Excel", e);
        }
    }
}
