package kz.pandev.bot.telegrambotapplication.service;

import kz.pandev.bot.telegrambotapplication.model.Category;
import kz.pandev.bot.telegrambotapplication.repository.CategoryRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class UploadService {

    private final CategoryRepository categoryRepository;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –Ω—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –æ–± —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö (–¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è) –∑–∞–ø–∏—Å—è—Ö.
     *
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π Telegram API
     * @param chatId ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param bot    —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
     */
    public void processExcelFile(String fileId, String chatId, TelegramLongPollingBot bot) {
        try {
            File file = bot.execute(new GetFile(fileId));
            String filePath = file.getFilePath();
            String fullUrl = "https://api.telegram.org/file/bot" + bot.getBotToken() + "/" + filePath;

            log.info("–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å URL: {}", fullUrl);

            // –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            Message progressMessage = bot.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%")
                    .build());

            int messageId = progressMessage.getMessageId();

            try (InputStream inputStream = new URL(fullUrl).openStream();
                 XSSFWorkbook workbook = new XSSFWorkbook(inputStream)) {

                var sheet = workbook.getSheetAt(0);
                int rowCount = sheet.getPhysicalNumberOfRows();
                int processedRows = 0;
                int lastProgress = -1;

                List<String> duplicates = new ArrayList<>();
                List<String> addedCategories = new ArrayList<>(); // –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

                for (Row row : sheet) {
                    if (row.getRowNum() == 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

                    String parentName = row.getCell(0).getStringCellValue().trim();
                    String childName = row.getCell(1).getStringCellValue().trim();

                    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    Category parent = categoryRepository.findByName(parentName)
                            .orElseGet(() -> {
                                Category newParent = new Category(parentName, null);
                                categoryRepository.save(newParent);
                                log.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}", parentName);
                                return newParent;
                            });

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if (!childName.isEmpty()) {
                        Optional<Category> existingChild = categoryRepository.findByName(childName);
                        if (existingChild.isEmpty()) {
                            categoryRepository.save(new Category(childName, parent));
                            log.info("–°–æ–∑–¥–∞–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {} -> {}", parentName, childName);
                            addedCategories.add("‚Ä¢ " + parentName + " -> " + childName); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        } else {
                            log.info("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}", childName);
                            duplicates.add(childName);
                        }
                    }

                    processedRows++;
                    int progress = (int) ((double) processedRows / rowCount * 100);

                    if (progress != lastProgress) {
                        lastProgress = progress;
                        bot.execute(EditMessageText.builder()
                                .chatId(chatId)
                                .messageId(messageId)
                                .text("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: " + progress + "%")
                                .build());
                    }
                }

                // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                bot.execute(EditMessageText.builder()
                        .chatId(chatId)
                        .messageId(messageId)
                        .text("‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                        .build());

                log.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: chatId={}", chatId);

                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if (!duplicates.isEmpty()) {
                    StringBuilder duplicateMsg = new StringBuilder("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ):\n");
                    for (String dup : duplicates) {
                        duplicateMsg.append("‚Ä¢ ").append(dup).append("\n");
                    }

                    bot.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(duplicateMsg.toString())
                            .build());
                }

                // –°–æ–æ–±—â–∞–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                if (!addedCategories.isEmpty()) {
                    StringBuilder addedCategoriesMsg = new StringBuilder("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n");
                    for (String addedCategory : addedCategories) {
                        addedCategoriesMsg.append(addedCategory).append("\n");
                    }

                    bot.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(addedCategoriesMsg.toString())
                            .build());
                }

            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞", e);
            try {
                bot.execute(SendMessage.builder()
                        .chatId(chatId)
                        .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞.")
                        .build());
            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ", ex);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω Excel-—Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
     *
     * @param chatId ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª
     * @param bot    —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    public void sendExcelTemplate(String chatId, TelegramLongPollingBot bot) {
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            var sheet = workbook.createSheet("Categories");

            sheet.setColumnWidth(0, 20 * 256); // –°—Ç–æ–ª–±–µ—Ü A
            sheet.setColumnWidth(1, 20 * 256); // –°—Ç–æ–ª–±–µ—Ü B
            sheet.setColumnWidth(2, 20 * 256); // –°—Ç–æ–ª–±–µ—Ü C (–ø—É—Å—Ç–æ–π)

            var headerFont = workbook.createFont();
            headerFont.setBold(true); // –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
            var headerStyle = workbook.createCellStyle();
            headerStyle.setFont(headerFont);
            headerStyle.setAlignment(HorizontalAlignment.CENTER);
            headerStyle.setVerticalAlignment(VerticalAlignment.CENTER);

            // –°—Ç–∏–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —è—á–µ–µ–∫ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
            var cellStyle = workbook.createCellStyle();
            cellStyle.setAlignment(HorizontalAlignment.CENTER);
            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            var header = sheet.createRow(0);
            header.setHeightInPoints(25); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            header.createCell(0).setCellValue("–ö–∞—Ç–µ–≥–æ—Ä–∏—è");
            header.getCell(0).setCellStyle(headerStyle); // –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–∏—Ä–Ω—ã–π —Å—Ç–∏–ª—å
            header.createCell(1).setCellValue("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è");
            header.getCell(1).setCellStyle(headerStyle);
            header.createCell(2).setCellValue(""); // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            header.getCell(2).setCellStyle(headerStyle); // –°—Ç–∏–ª—å –¥–ª—è –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞

            // –î–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
            String[][] exampleData = {
                    {"–ù–∞–ø–∏—Ç–∫–∏", "–°–æ—Å–∞-–°–æl–∞", ""},
                    {"–ù–∞–ø–∏—Ç–∫–∏", "Fanta", ""}
            };

            for (int i = 0; i < exampleData.length; i++) {
                var row = sheet.createRow(i + 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                row.setHeightInPoints(25); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                for (int j = 0; j < exampleData[i].length; j++) {
                    row.createCell(j).setCellValue(exampleData[i][j]);
                    row.getCell(j).setCellStyle(cellStyle); // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                }
            }

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());

            bot.execute(SendDocument.builder()
                    .chatId(chatId)
                    .document(new InputFile(inputStream, "category_template.xlsx"))
                    .caption("\uD83D\uDCCE –í–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                    .build());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", e);
        }
    }
}
