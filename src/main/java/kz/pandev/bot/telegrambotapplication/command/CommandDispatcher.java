package kz.pandev.bot.telegrambotapplication.command;

import jakarta.annotation.PostConstruct;
import kz.pandev.bot.telegrambotapplication.service.UploadService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class CommandDispatcher {

    private final Map<String, BotCommand> commandMap = new HashMap<>();
    private final List<BotCommand> commands;
    private final UploadService uploadService;

    @PostConstruct
    private void init() {
        for (BotCommand command : commands) {
            commandMap.put(command.getCommand(), command);
            log.info("–ö–æ–º–∞–Ω–¥–∞ '{}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", command.getCommand());
        }
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CommandDispatcher –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {} –∫–æ–º–∞–Ω–¥.", commandMap.size());
    }

    public void dispatch(Update update, TelegramLongPollingBot bot) {
        if (update.hasMessage()) {
            log.debug("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", update.getMessage().getText());
            handleMessage(update, bot);
        } else if (update.hasCallbackQuery()) {
            log.debug("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", update.getCallbackQuery().getData());
            handleCallback(update, bot);
        } else {
            log.warn("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", update);
        }
    }

    private void handleMessage(Update update, TelegramLongPollingBot bot) {
        Message message = update.getMessage();

        if (message.hasText()) {
            String text = message.getText().trim();
            log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", text);

            String mappedCommand = switch (text) {
                case "üìò –°–ø—Ä–∞–≤–∫–∞" -> "/help";
                case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç" -> "/addelement";
                case "‚ûñ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç" -> "/removeelement";
                case "üå≥ –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π" -> "/viewtree";
                case "üì• –°–∫–∞—á–∞—Ç—å Excel" -> "/download";
                case "üìä –ò–º–ø–æ—Ä—Ç Excel" -> "/upload";
                case "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π" -> "/viewcategories";
                default -> text.split(" ")[0];
            };

            BotCommand command = commandMap.get(mappedCommand);
            if (command != null) {
                log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {}", mappedCommand);
                command.execute(update, bot);
            } else {
                log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}", mappedCommand);
                handleUnknownCommand(update, bot, message.getChatId().toString());
            }

        } else if (message.hasDocument()) {
            Document document = message.getDocument();
            String fileName = document.getFileName();
            String chatId = message.getChatId().toString();

            log.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {}", fileName);

            if (fileName != null && fileName.toLowerCase().endsWith(".xlsx")) {
                uploadService.processExcelFile(document.getFileId(), chatId, bot);
            } else {
                log.warn("–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {}", fileName);
                send(bot, chatId, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xlsx (Excel 2007+).");
            }
        }
    }

    private void handleCallback(Update update, TelegramLongPollingBot bot) {
        CallbackQuery callback = update.getCallbackQuery();
        String data = callback.getData();
        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞: {}", data);

        BotCommand command = null;

        if (data.startsWith("DELETE:") || data.startsWith("PAGE:")) {
            command = commandMap.get("/removeelement");
        } else {
            command = commandMap.get(data);
        }

        if (command != null) {
            log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ inline-–∫–æ–º–∞–Ω–¥—ã: {}", data);
            command.execute(update, bot);
        } else {
            log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è inline-–∫–æ–º–∞–Ω–¥–∞: {}", data);
            handleUnknownCommand(update, bot, callback.getMessage().getChatId().toString());
        }
    }

    private void handleUnknownCommand(Update update, TelegramLongPollingBot bot, String chatId) {
        BotCommand unknownCommand = commandMap.get("unknown");
        if (unknownCommand != null) {
            unknownCommand.execute(update, bot);
        } else {
            send(bot, chatId, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.");
        }
    }

    private void send(TelegramLongPollingBot bot, String chatId, String text) {
        try {
            bot.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", chatId, e.getMessage(), e);
        }
    }
}
