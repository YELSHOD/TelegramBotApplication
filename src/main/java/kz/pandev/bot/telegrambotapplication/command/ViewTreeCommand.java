package kz.pandev.bot.telegrambotapplication.command;

import kz.pandev.bot.telegrambotapplication.util.TreeBuilder;
import kz.pandev.bot.telegrambotapplication.util.TreeNode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Comparator;
import java.util.List;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
 * <p>
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç {@link TreeBuilder} –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π,
 * —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ViewTreeCommand implements BotCommand {

    private final TreeBuilder treeBuilder;

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã.
     *
     * @return —Å—Ç—Ä–æ–∫–∞ "/viewtree"
     */
    @Override
    public String getCommand() {
        return "/viewtree";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram.
     * –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ —Å–±–æ–µ–≤.
     *
     * @param update –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram API
     * @param bot    —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramLongPollingBot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    @Override
    public void execute(Update update, TelegramLongPollingBot bot) {
        String chatId = update.getMessage().getChatId().toString();

        try {
            // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ—Ä–Ω–µ–º (null –æ–∑–Ω–∞—á–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
            TreeNode root = treeBuilder.buildTree(null);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            String treeString = formatTreeWithParentIndicator(root, 0);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º
            SendMessage message = new SendMessage(chatId, treeString);
            bot.execute(message);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞: {}", e.getMessage());
            try {
                bot.execute(new SendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."));
            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {}", ex.getMessage());
            }
        }
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
     * <p>
     * –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π:
     * <ul>
     *   <li>–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ "üîπ";</li>
     *   <li>–î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ "‚ó¶".</li>
     * </ul>
     * <p>
     * –í—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
     *
     * @param node  —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
     * @param level —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (0 ‚Äî –∫–æ—Ä–µ–Ω—å)
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ –∏ –µ–≥–æ –ø–æ—Ç–æ–º–∫–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
     */
    private String formatTreeWithParentIndicator(TreeNode node, int level) {
        StringBuilder sb = new StringBuilder();
        String indent = "    ".repeat(level);

        if (level == 0) {
            sb.append(" ").append(node.getName()).append("\n");

        } else if (level == 1) {
            sb.append(indent).append("üîπ ").append(node.getName()).append("\n");

        } else {
            sb.append(indent).append("‚ó¶ ").append(node.getName()).append("\n");
        }

        List<TreeNode> sortedChildren = node.getChildren().stream()
                .sorted(Comparator.comparing(TreeNode::getName, String.CASE_INSENSITIVE_ORDER))
                .toList();

        for (TreeNode child : sortedChildren) {
            sb.append(formatTreeWithParentIndicator(child, level + 1));
        }

        return sb.toString();
    }

}
