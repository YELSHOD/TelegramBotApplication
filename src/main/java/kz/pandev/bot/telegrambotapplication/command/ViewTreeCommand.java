package kz.pandev.bot.telegrambotapplication.command;

import kz.pandev.bot.telegrambotapplication.util.TreeBuilder;
import kz.pandev.bot.telegrambotapplication.util.TreeNode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Comparator;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class ViewTreeCommand implements BotCommand {

    private final TreeBuilder treeBuilder;

    @Override
    public String getCommand() {
        return "/viewTree";
    }

    @Override
    public void execute(Update update, TelegramLongPollingBot bot) {
        String chatId = update.getMessage().getChatId().toString();

        try {
            // –°—Ç—Ä–æ—é –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–º–æ—â—å—é TreeBuilder (null ‚Äî –∫–æ—Ä–µ–Ω—å)
            TreeNode root = treeBuilder.buildTree(null);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –¥–µ—Ä–µ–≤–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
            String treeString = formatTreeWithParentIndicator(root, 0);

            // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ä–µ–≤–æ–º
            SendMessage message = new SendMessage(chatId, treeString);
            bot.execute(message);

        } catch (Exception e) {
            // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –ª–æ–≥–∏—Ä—É—é –∏ —Å–æ–æ–±—â–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞: {}", e.getMessage());
            try {
                bot.execute(new SendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."));
            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {}", ex.getMessage());
            }
        }
    }

    private String formatTreeWithParentIndicator(TreeNode node, int level) {
        StringBuilder sb = new StringBuilder();
        String indent = "    ".repeat(level);

        if (level == 0) {
            sb.append("üîπ ").append(node.getName()).append("\n");
        } else {
            sb.append(indent).append("‚ó¶ ").append(node.getName()).append("\n");
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
        List<TreeNode> sortedChildren = node.getChildren().stream()
                .sorted(Comparator.comparing(TreeNode::getName, String.CASE_INSENSITIVE_ORDER))
                .toList();

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
        for (TreeNode child : sortedChildren) {
            sb.append(formatTreeWithParentIndicator(child, level + 1));
        }

        return sb.toString();
    }
}
